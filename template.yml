# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  challenge-api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  DBName:
    Type: String
    Default: challengedb
  DBUser:
    Type: String
    Default: "{{resolve:ssm:challenge-user:1}}"
  DBPassword:
    Type: String
    Default: "{{resolve:ssm:challenge-db-password:3}}"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs14.x
    MemorySize: 128
    Environment:
      Variables:
        DB_NAME: !Ref DBName
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Ref DBPassword
        DB_HOST: !GetAtt ChallengeDBInstance.Endpoint.Address
        DB_PORT: !GetAtt ChallengeDBInstance.Endpoint.Port

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  ChallengeUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cognito-user-pool-challenge

  ChallengeBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub bucket-challenge-${AWS::AccountId}

  ChallengeAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: api-gateway-challenge
      StageName: dev
      Cors:
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
      Auth:
        ApiKeyRequired: true

  ChallengeApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: api-key-challenge
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ChallengeAPI
          StageName: !Ref ChallengeAPI.Stage

  ChallengeUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ChallengeAPI
          Stage: !Ref ChallengeAPI.Stage
      UsagePlanName: gateway-api-usage-plan-challenge

  ChallengeUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ChallengeApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ChallengeUsagePlan

  ChallengeFunctionRole:
    Type: AWS::IAM::Role # More info about Roles: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Properties:
      RoleName: iam-role-challenge-functions
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # policy basic execution lambda to add logs to cloudwatch
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess # policy default para leer parametros de System Manager
      Policies:
        - PolicyName: ListCognitoPoolUsers
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - cognito-idp:ListUsers
                Resource: !GetAtt ChallengeUserPool.Arn

  ChallengePutPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-api-challenge-create-post
      Handler: src/handlers/post/create.lambdaHandler
      Role: !GetAtt ChallengeFunctionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /posts
            RestApiId: !Ref ChallengeAPI
            Method: POST

  ChallengeListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-api-challenge-list-users
      Handler: src/handlers/user/list.lambdaHandler
      Role: !GetAtt ChallengeFunctionRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref ChallengeUserPool
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users
            RestApiId: !Ref ChallengeAPI
            Method: GET

  ChallengeDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: "5"
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword

Outputs:
  APIKEY:
    Description: "Challenge API KEY ID"
    Value: !Ref ChallengeApiKey
  WebEndpoint:
    Description: "API Gateway endpoint URL for test stage"
    Value: !Sub "https://${ChallengeAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  DBInstanceHost:
    Description: "URL of DB Instance"
    Value: !GetAtt ChallengeDBInstance.Endpoint.Address
  DBInstancePort:
    Description: "Port of DB Instance"
    Value: !GetAtt ChallengeDBInstance.Endpoint.Port
